----------------------------------------------
示例1：

如下代码以螺旋方式在一个矩阵中顺序填写数字，然后显示该矩阵。
Mat类实现了顺时针填充。
MyMat类继承了Mat类，实现了逆时针填充。

填充的大约步骤是：
先安装约定的行列数目，创建一个临时的二维数组，
然后选定一个起始位置和初始的填充方向，
在该位置填充一个数字，然后移动到下一个位置。
如果下一个位置是越界的，或者已经有了填充的数字，则变换填充的方向（转弯）

Pos类的对象用来存储当前填充的位置和填充的方向。
其中x，y是当前位置的坐标。dx,dy是列向、行向的增量，用来决定下一个的位置。
比如往右移动：dx=1,dy=0, 表示列加1，行不动。
再比如，往上移动：dx=0,dy=-1, 表示列不动，行号减1


/*
待填入位置的参数：
	x 待填入列号
	y 待填入行号
	dx 当前走向--列向
	dy 当前走向--行向
*/
class Pos
{
	public int x;
	public int y;
	public int dx;
	public int dy;
	public Pos(int x, int y, int dx, int dy){
		this.x = x;
		this.y = y;
		this.dx = dx;
		this.dy = dy;
	}
	public Pos(Pos t)
	{
		x = t.x;
		y = t.y;
		dx = t.dx;
		dy = t.dy;
	}
}

class Mat
{
	private int row;  // 行数
	private int col;  // 列数
	
	public Mat(){
		row = 5;
		col = 5;
	}
	public Mat(int row, int col)
	{
		this.row = row;
		this.col = col;
	}
	
	public void showArray(int[][] ar)
	{
		System.out.println();
		for(int i=0; i<ar.length; i++){
			for(int j=0; j<ar[i].length; j++){
				System.out.print(String.format("%3d ",ar[i][j]));
			}
			System.out.println();
		}
	}
	
	public void print()
	{
		int n = row * col; // 总的元素个数
		int[][] ar = new int[row][col];  //创建临时的二维数组，向其中填写数字
		Pos cur = initPos(); //待填入位置初始参数		
		int m = 1; // 待填入的初始数字
		
		for(;;){
			ar[cur.y][cur.x] = m;  //填入数字
			if(m>=n) break;
			cur = getNextPos(ar,cur);  //求下一个位置参数
			m++;  //求下一个被填入的数字
		}
		
		showArray(ar);
	}
	
	protected Pos initPos()
	{
		return new Pos(0,0,1,0);
	}
	
	protected Pos getNextPos(int[][] ar, Pos cur)
	{
		Pos t = new Pos(cur);
		t.x += t.dx;  // 按当前方向试走一下
		t.y += t.dy;
		
		if(t.x >=0 && t.x < col && t.y >= 0 && t.y < row  // 位置没有越界
		&& ar[t.y][t.x] == 0) { //该位置也没有被填充过
			return t;	
		}
		else{  // 转向后，再试验走到下一个位置
			t = changeDirection(cur);
			return getNextPos(ar, t);
		}
	}
	
	protected Pos changeDirection(Pos p)
	{
		Pos t = new Pos(p);
		if(p.dx==0 && p.dy==1){ // 向右转向下
			t.dx = 1;
			t.dy = 0;
		}
		else if(p.dx==1 && p.dy==0){ // 向下转向左
			t.dx = 0;
			t.dy = -1;
		}
		else if(p.dx==0 && p.dy==-1){ // 向左转向上
			t.dx = -1;
			t.dy = 0;
		}
		else if(p.dx==-1 && p.dy==0){ // 向上转向右
			t.dx = 0;
			t.dy = 1;
		}
		return t;	
	}	
}

class MyMat extends Mat
{
	protected Pos changeDirection(Pos p)
	{
		// super.changeDirection(p);
		// 填写代码的位置
	}
	
	protected Pos initPos()
	{
		return new Pos(0,0,0,1);
	}	
}

public class A
{
	public static void main(String[] args)
	{
		Mat a = new Mat(5,8);
		a.print();
		
		a = new MyMat();
		a.print();
	}
}


请仔细阅读源代码，并完成MyMat类的changeDirection这个方法的内容。
这个方法控制着填充过程，碰壁后需要转去的新方向。

对于上面的测试数据，程序应该输出：

  1   2   3   4   5   6   7   8
 22  23  24  25  26  27  28   9
 21  36  37  38  39  40  29  10
 20  35  34  33  32  31  30  11
 19  18  17  16  15  14  13  12

  1  16  15  14  13
  2  17  24  23  12
  3  18  25  22  11
  4  19  20  21  10
  5   6   7   8   9

.................................

参考答案：
		Pos t = new Pos(p);
		if(p.dx==0 && p.dy==1){
			t.dx = -1;
			t.dy = 0;
		}
		else if(p.dx==1 && p.dy==0){
			t.dx = 0;
			t.dy = 1;
		}
		else if(p.dx==0 && p.dy==-1){
			t.dx = 1;
			t.dy = 0;
		}
		else if(p.dx==-1 && p.dy==0){
			t.dx = 0;
			t.dy = -1;
		}
		return t;

-----------------------------------------------------------

示例2：

    假设一个句子是由许多单词用一个或多个空格分开的，比如：
    "duck dog  cat  sheep dog  dog cow cat  dog mouse dog  cat hen"
    请你统计出每个词出现的次数。
    输出类似：
duck: 1
dog: 5
cat: 3
sheep: 1
cow: 1
mouse: 1
hen: 1

    下面的程序实现了这个功能。其基本思想是：
     准备一个WordCell类型来存储某个单词的出现次数。
    准备一个临时的Vector用来动态存储多个WordCell。
    扫描输入的串，取出一个个的单词。调用putWord把该单词加入到Vector中。
    如果Vector中已经有了这个单词，把该单词的num加1，如果没有，就生成一个新的WordCell，放到队尾。
   
    分离单词的算法是：一直扫描待定串，如果遇到空格，就把已经累积的字符做成单词送出，如果不是空格，就把该字符累积起来，然后扫描下一个字符。
    
    请仔细阅读程序，填写划线部分缺少的代码。


import java.util.*;

class WordCell
{
	private String word;
	private int num;
	
	public WordCell(String w){
		word = w;
		num = 1;
	} 
	
	public void add(){
		num++;
	}
	
	public String getWord(){ return word; }
	public int getNum() { return num; }
	
	public String toString(){
		return word + ": " + num;
	}
}

public class B
{
	private static void putWord(List words, String word)
	{
		for(int i=0; i<words.size(); i++){
			WordCell x = (WordCell)words.get(i);
			if(x.getWord().equals(word)){
				x.add();
				return;
			}
		}
		
		words.add( _______________________ );  //填空位置
	}
	
	public static void show(List words)
	{
		for(Object x: words){
			System.out.println(x);
		}
	}
	
	public static void f(String s)
	{
		String word = "";
		List words = new Vector();
		
		for(int i=0; i<s.length(); i++){
			char c = s.charAt(i);
			if(c==' '){
				if(word.length()>0){
					putWord(words, word);
					word = "";
				}
			}
			else{
				word += c;
			}
		}
		
		if(word.length()>0) putWord(words, word);
		
		show(words);
	}
	
	
	public static void main(String[] args)
	{
		String s = "duck dog  cat  sheep dog  dog cow cat  dog mouse dog  cat hen";
		
		f(s);
	}
}



参考答案：
new WordCell(word)


---------------------------------------------------

示例3：

用天平称重时，我们希望用尽可能少的砝码组合称出尽可能多的重量。
如果只有5个砝码，重量分别是1，3，9，27，81。则它们可以组合称出1到121之间任意整数重量（砝码允许放在左右两个盘中）。
本题目要求编程实现：对用户给定的重量，给出砝码组合方案。
例如：
用户输入：
5
程序输出：
9-3-1
用户输入：
19
程序输出：
27-9+1

要求程序输出的组合总是大数在前小数在后。
可以假设用户的输入的数字符合范围1~121。

【解题思路提示】
我们把已知的砝码序列记为：x1, x2, x3, x4, x5, x6 (这里多加一个标准砝码，为解题叙述方便)
对于任意给定的重量x，如果刚好等于xi 则问题解决。
否则一定会位于两个标准砝码重量的中间，不妨设为：xi < x < xj
令 a = x – xi,  b = xj – x
则，x 要么可以表示为： xi + a, 要么可以表示为： xj – b
这样问题就归结为怎样表示出 a 或 b

另一思路：对于每个xi，可以乘以一个系数ki，再求和。
ki的数值无外乎：-1 0 1
这样，因为标准砝码的数量的很少的，我们就可以多层循环暴力组合ki来求解。

还有更“土气”但有效的思路：既然输入范围只有120左右，如果对每一种情况都做人工求解，只要列一个大表，等查询的时候，直接输出答案就好了啊！但…这似乎是个耗时的工程…

