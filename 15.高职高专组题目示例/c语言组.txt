------------------------------------------------

示例1：

    下面的代码先调用init函数填充一个二维数组，然后调用show函数，把该数组显示出来。
    二维数组指针传入函数的时候被当做一维数组来处理。这里利用了二维数组在内存中存储特征：先存第1行，再存第2行，...
    
    因此，我们根据一维数组的下标，可以计算出其二维数组的下标。
    
#include <stdio.h>
#define ROW 5
#define COL 5

void init(int* p)
{
	int i;
	for(i=0; i<ROW*COL; i++){
		p[i] = i+1;
	}
}

void show(int* p)
{
	int i;
	for(i=0; i<ROW*COL; i++){
		printf("%3d ", p[i]);
		if(_________________){   //填空位置
			printf("\n");
		}
	}
}

int main()
{
	int a[ROW][COL];
	init((int*)a);
	show((int*)a);
	return 0;
}


为了显示为二维数组，需要在每一行的结束输出换行符。关键是计算出应该输出的时机。
注意：
第一行之前不能换行（那样会产生一个空行），最后一行结束需要换行符。
另外注意不要把程序写“死”了，当改变ROW COl值得时候，程序的反应应该是正常的。
对于题目中的值，应该输出：
  1   2   3   4   5
  6   7   8   9  10
 11  12  13  14  15
 16  17  18  19  20
 21  22  23  24  25

请仔细阅读源程序，填写划线位置缺少的代码。 
 
 
参考答案：i%COL==COL-1



--------------------------------------------------------------
示例2：

    假设一个句子是由许多单词用一个或多个空格分开的，比如：
    "cow    dog  cat    cow  horse   dog  duck cat dog dog"
    请你统计出每个词出现的次数。
    输出类似：
cow = 2
dog = 3
cat = 2
horse = 1
duck = 1

    下面的程序实现了这个功能。其基本思想是：
    准备一个结构数组，每个结构中存储：单词和它出现的次数。
    从头扫描串，分离出一个个的单词，在结构数组中查找，如果有，就把该结构的计数增加，如果没有，就创建新的结构，并记录其次数为1.
   
    分离单词的算法是：一直扫描待定串，如果遇到空格，就把已经累积的字符做成单词送出，如果不是空格，就把该字符累积起来，然后扫描下一个字符。
    
    请仔细阅读程序，填写划线部分缺少的代码。
    
#include <stdio.h>
#include <string.h>
#define MAX_NUM 30

typedef struct{
	char word[20];
	int num;
}WORD_CELL; 

// 在words中查找，如果找到，把其num增加，如果没有，建立新记录 
int PutWord(WORD_CELL* words, int n, char* word)
{
	WORD_CELL* p= words;
	int i; 
	for(i=0; i<n; i++){
		if(strcmp(p->word,word)==0){
			p->num++;
			return n;
		}
		p++;
	}
	
	strcpy(_______________________); //填空位置
	p->num = 1;
	return n+1;
}

void show(WORD_CELL* words, int n)
{
	int i;
	for(i=0; i<n; i++){
		printf("%s = %d\n", words[i].word, words[i].num);
	}
}

void f(char* p)
{
	char buf[100];  //存储临时产生的单词 
	int nBuf = 0;  // 记录buf中的有效字符数 
	
	WORD_CELL words[MAX_NUM];  
	int nWords = 0; //记录words中的有效记录数目 
	
	for(;*p;p++){
		if(*p==' '){
			if(nBuf>0){
				buf[nBuf] = '\0';
				nWords = PutWord(words, nWords, buf);
				nBuf = 0;
			}
		}
		else {
			buf[nBuf++] = *p;
		}
	}

	if(nBuf>0){
		buf[nBuf] = '\0';
		nWords = PutWord(words, nWords, buf);		
	}	
	show(words, nWords);
}

int main()
{
	char word[] = "cow   dog cat cow horse dog  duck  cat dog    dog";
	f(word);
	return 0;
}
    
    
参考答案：p->word, word

--------------------------------------------------

示例3：
用天平称重时，我们希望用尽可能少的砝码组合称出尽可能多的重量。
如果只有5个砝码，重量分别是1，3，9，27，81。则它们可以组合称出1到121之间任意整数重量（砝码允许放在左右两个盘中）。
本题目要求编程实现：对用户给定的重量，给出砝码组合方案。
例如：
用户输入：
5
程序输出：
9-3-1
用户输入：
19
程序输出：
27-9+1

要求程序输出的组合总是大数在前小数在后。
可以假设用户的输入的数字符合范围1~121。

【解题思路提示】
我们把已知的砝码序列记为：x1, x2, x3, x4, x5, x6 (这里多加一个标准砝码，为解题叙述方便)
对于任意给定的重量x，如果刚好等于xi 则问题解决。
否则一定会位于两个标准砝码重量的中间，不妨设为：xi < x < xj
令 a = x – xi,  b = xj – x
则，x 要么可以表示为： xi + a, 要么可以表示为： xj – b
这样问题就归结为怎样表示出 a 或 b

另一思路：对于每个xi，可以乘以一个系数ki，再求和。
ki的数值无外乎：-1 0 1
这样，因为标准砝码的数量的很少的，我们就可以多层循环暴力组合ki来求解。

还有更“土气”但有效的思路：既然输入范围只有120左右，如果对每一种情况都做人工求解，只要列一个大表，等查询的时候，直接输出答案就好了啊！但…这似乎是个耗时的工程…
